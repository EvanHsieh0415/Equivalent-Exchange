plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.5-SNAPSHOT" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
}

def javaVersion = 17
def javaVersionObj = JavaVersion.VERSION_17

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.officialMojangMappings()
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    version = "${minecraft_version}-${mod_version}"
    group = rootProject.maven_group
    archivesBaseName = rootProject.archives_base_name

    repositories {
        mavenLocal()
        maven {
            name "CreeperHost"
            url 'https://maven.creeperhost.net'
        }
        maven { url "https://maven.shedaniel.me" }
        maven {
            url "https://maven.saps.dev/releases"
            content {
                includeGroup "dev.latvian.mods"
                includeGroup "dev.ftb.mods"
            }
        }
        maven {
            url "https://maven.saps.dev/snapshots"
            content {
                includeGroup "dev.latvian.mods"
                includeGroup "dev.ftb.mods"
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = javaVersion
    }

    java {
        withSourcesJar()
    }

    publishing {
        repositories {
            def token = providers.environmentVariable("FTB_MAVEN_TOKEN")
            if (token.isPresent()) {
                maven {
                    url "https://maven.ftb.dev/releases"
                    credentials {
                        username = "ftb"
                        password = token.get()
                    }
                }
            }
        }
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSEFORGE_KEY").getOrNull() == null
    changelog = createChangelog()
    version = "${mod_version}"

    def tag = providers.environmentVariable("TAG").getOrElse("release")
    type = tag.endsWith("-beta") ? BETA : (tag.endsWith("-alpha") ? ALPHA : STABLE)

    def createOptions = (String projectName) -> {
        publishOptions {
            file = project.provider { project(":$projectName").tasks.remapJar }.flatMap { it.archiveFile }
            displayName = "[${projectName.toUpperCase()}][${minecraft_version}] Equivalent Exchange ${mod_version}"
            modLoaders.add(projectName.toLowerCase())
        }
    }

    def curseForgeOptions = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSEFORGE_KEY")
        projectId = curse_project_id
        minecraftVersions.add("${minecraft_version}")
        javaVersions.add(javaVersionObj)
    }

    curseforge("curseforgeFabric") {
        from(curseForgeOptions, createOptions("fabric"))
        requires('architectury-api')
        requires('fabric-api')
        requires('polylib')
    }

    curseforge("curseforgeNeoForge") {
        from(curseForgeOptions, createOptions("neoforge"))
        requires('architectury-api')
        requires('polylib')
    }
}

/**
 * Creates a snippet of the changelog using the projects version id as an anchor
 */
def createChangelog() {
    def changelogText = file("CHANGELOG.md").text
    def changelog = changelogText.split("\n")

    def changelogBuilder = new StringBuilder()

    def consuming = false
    for (line in changelog) {
        if (line.startsWith("## ")) {
            consuming = line.contains("${mod_version}")
            if (!consuming) {
                break
            }
        }

        if (consuming) {
            changelogBuilder.append(line).append("\n")
        }
    }

    def output = changelogBuilder.toString()
    if (output.isBlank()) {
        return "## ${mod_version}\n\n### Changes\n\n- General improvements and bug fixes."
    }

    return output.trim()
}
